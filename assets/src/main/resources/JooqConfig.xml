<?xml version="1.0" encoding="UTF-8"  standalone="yes"?>
<configuration
	xmlns="http://www.jooq.org/xsd/jooq-codegen-3.12.0.xsd">
	<!-- Configure the database connection here -->
	<jdbc>
		<driver>com.mysql.cj.jdbc.Driver</driver>
		<url>jdbc:mysql://127.0.0.1:3306/?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8
		</url>
		<user>root</user>
		<password>123456</password>

		<!-- You can also pass user/password and other JDBC properties in the optional 
			properties tag: -->
		<!--properties> <property><key>user</key><value>[db-user]</value></property> 
			<property><key>password</key><value>[db-password]</value></property> </properties -->
	</jdbc>

	<generator>
		<strategy>
			<matchers>
				<tables>
					<table>

						<!-- Expression is omitted. This will make this rule apply to all tables -->
						<tableIdentifier>
							<transform>UPPER</transform>
							<expression>$0</expression>
						</tableIdentifier>
						<tableClass>
							<transform>PASCAL</transform>
							<expression>T_$0</expression>
						</tableClass>
						<recordClass>
							<transform>PASCAL</transform>
							<expression>R_$0</expression>
						</recordClass>
					</table>
				</tables>
			</matchers>
		</strategy>
		<database>
			<!-- The database dialect from jooq-meta. Available dialects are named 
				org.jooq.meta.[database].[database]Database. Natively supported values are: 
				org.jooq.meta.ase.ASEDatabase org.jooq.meta.auroramysql.AuroraMySQLDatabase 
				org.jooq.meta.aurorapostgres.AuroraPostgresDatabase org.jooq.meta.cubrid.CUBRIDDatabase 
				org.jooq.meta.db2.DB2Database org.jooq.meta.derby.DerbyDatabase org.jooq.meta.firebird.FirebirdDatabase 
				org.jooq.meta.h2.H2Database org.jooq.meta.hana.HANADatabase org.jooq.meta.hsqldb.HSQLDBDatabase 
				org.jooq.meta.informix.InformixDatabase org.jooq.meta.ingres.IngresDatabase 
				org.jooq.meta.mariadb.MariaDBDatabase org.jooq.meta.mysql.MySQLDatabase org.jooq.meta.oracle.OracleDatabase 
				org.jooq.meta.postgres.PostgresDatabase org.jooq.meta.redshift.RedshiftDatabase 
				org.jooq.meta.sqldatawarehouse.SQLDataWarehouseDatabase org.jooq.meta.sqlite.SQLiteDatabase 
				org.jooq.meta.sqlserver.SQLServerDatabase org.jooq.meta.sybase.SybaseDatabase 
				org.jooq.meta.teradata.TeradataDatabase org.jooq.meta.vertica.VerticaDatabase 
				This value can be used to reverse-engineer generic JDBC DatabaseMetaData 
				(e.g. for MS Access) org.jooq.meta.jdbc.JDBCDatabase This value can be used 
				to reverse-engineer standard jOOQ-meta XML formats org.jooq.meta.xml.XMLDatabase 
				This value can be used to reverse-engineer schemas defined by SQL files (requires 
				jooq-meta-extensions dependency) org.jooq.meta.extensions.ddl.DDLDatabase 
				This value can be used to reverse-engineer schemas defined by JPA annotated 
				entities (requires jooq-meta-extensions dependency) org.jooq.meta.extensions.jpa.JPADatabase 
				You can also provide your own org.jooq.meta.Database implementation here, 
				if your database is currently not supported -->
			<name>org.jooq.meta.mysql.MySQLDatabase</name>

			<!-- All elements that are generated from your schema (A Java regular 
				expression. Use the pipe to separate several expressions) Watch out for case-sensitivity. 
				Depending on your database, this might be important! You can create case-insensitive 
				regular expressions using this syntax: (?i:expr) Whitespace is ignored and 
				comments are possible. -->
			<includes>.*</includes>

			<!-- All elements that are excluded from your schema (A Java regular expression. 
				Use the pipe to separate several expressions). Excludes match before includes, 
				i.e. excludes have a higher priority -->
			<excludes>

			</excludes>
			<!--下面这两行是为view也生成代码的关键 -->
			<!--force generating id'sfor everything in public schema, that has an 
				'id' field -->
			<syntheticPrimaryKeys>public\..*\.id</syntheticPrimaryKeys>
			<!--name for fake primary key -->
			<overridePrimaryKeys>override_primmary_key</overridePrimaryKeys>
			<!-- The schema that is used locally as a source for meta information. 
				This could be your development schema or the production schema, etc This 
				cannot be combined with the schemata element. If left empty, jOOQ will generate 
				all available schemata. See the manual's next section to learn how to generate 
				several schemata -->
			<inputSchema>test</inputSchema>
			<outputSchemaToDefault>true</outputSchemaToDefault>
      		<outputCatalogToDefault>true</outputCatalogToDefault>
		</database>

		<generate>
			<!--生成dao和pojo -->
			<daos>true</daos>
			<records>true</records>
			<recordsImplementingRecordN>false</recordsImplementingRecordN>
			<globalTableReferences>false</globalTableReferences>
			<globalKeyReferences>false</globalKeyReferences>
			<indexes>false</indexes>
			<!--emptySchemas>true</emptySchemas>
			<emptyCatalogs>true</emptyCatalogs-->

			<pojos>true</pojos>
			<serializablePojos>false</serializablePojos>
			<fluentSetters>true</fluentSetters>
			<jpaAnnotations>true</jpaAnnotations>
			<!--把数据库时间类型映射到java 8时间类型 -->
			<javaTimeTypes>true</javaTimeTypes>
			
			<interfaces>false</interfaces>
			<!--不在生成的代码中添加spring注释，比如@Repository -->
			<springAnnotations>true</springAnnotations>
		</generate>


		<target>
			<!-- The destination package of your generated classes (within the destination 
				directory) jOOQ may append the schema name to this package if generating 
				multiple schemas, e.g. org.jooq.your.packagename.schema1 org.jooq.your.packagename.schema2 -->
			<packageName>com.dili.assets.jooq</packageName>

			<!-- The destination directory of your generated classes -->
			<directory>src/main/java</directory>
			<encoding>utf-8</encoding>
			<clean>false</clean>
		</target>
	</generator>
</configuration>